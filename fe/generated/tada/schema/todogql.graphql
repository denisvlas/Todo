schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "accounts"
"""
type accounts {
  account_id: String!
  project_id: String
  user_id: String
}

"""
aggregated selection of "accounts"
"""
type accounts_aggregate {
  aggregate: accounts_aggregate_fields
  nodes: [accounts!]!
}

"""
aggregate fields of "accounts"
"""
type accounts_aggregate_fields {
  count(columns: [accounts_select_column!], distinct: Boolean): Int!
  max: accounts_max_fields
  min: accounts_min_fields
}

"""
Boolean expression to filter rows from the table "accounts". All fields are combined with a logical 'AND'.
"""
input accounts_bool_exp {
  _and: [accounts_bool_exp!]
  _not: accounts_bool_exp
  _or: [accounts_bool_exp!]
  account_id: String_comparison_exp
  project_id: String_comparison_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "accounts"
"""
enum accounts_constraint {
  """unique or primary key constraint"""
  accounts_pkey
}

"""
input type for inserting data into table "accounts"
"""
input accounts_insert_input {
  account_id: String
  project_id: String
  user_id: String
}

"""aggregate max on columns"""
type accounts_max_fields {
  account_id: String
  project_id: String
  user_id: String
}

"""aggregate min on columns"""
type accounts_min_fields {
  account_id: String
  project_id: String
  user_id: String
}

"""
response of any mutation on the table "accounts"
"""
type accounts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [accounts!]!
}

"""
on conflict condition type for table "accounts"
"""
input accounts_on_conflict {
  constraint: accounts_constraint!
  update_columns: [accounts_update_column!]! = []
  where: accounts_bool_exp
}

"""Ordering options when selecting data from "accounts"."""
input accounts_order_by {
  account_id: order_by
  project_id: order_by
  user_id: order_by
}

"""primary key columns input for table: accounts"""
input accounts_pk_columns_input {
  account_id: String!
}

"""
select columns of table "accounts"
"""
enum accounts_select_column {
  """column name"""
  account_id

  """column name"""
  project_id

  """column name"""
  user_id
}

"""
input type for updating data in table "accounts"
"""
input accounts_set_input {
  account_id: String
  project_id: String
  user_id: String
}

"""
update columns of table "accounts"
"""
enum accounts_update_column {
  """column name"""
  account_id

  """column name"""
  project_id

  """column name"""
  user_id
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "accounts"
  """
  delete_accounts(
    """filter the rows which have to be deleted"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  delete single row from the table: "accounts"
  """
  delete_accounts_by_pk(account_id: String!): accounts

  """
  delete data from the table: "projects"
  """
  delete_projects(
    """filter the rows which have to be deleted"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  delete single row from the table: "projects"
  """
  delete_projects_by_pk(project_id: String!): projects

  """
  delete data from the table: "tasks"
  """
  delete_tasks(
    """filter the rows which have to be deleted"""
    where: tasks_bool_exp!
  ): tasks_mutation_response

  """
  delete single row from the table: "tasks"
  """
  delete_tasks_by_pk(task_id: String!): tasks

  """
  delete data from the table: "user_credentials"
  """
  delete_user_credentials(
    """filter the rows which have to be deleted"""
    where: user_credentials_bool_exp!
  ): user_credentials_mutation_response

  """
  delete single row from the table: "user_credentials"
  """
  delete_user_credentials_by_pk(credential_id: String!): user_credentials

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(user_id: String!): users

  """
  insert data into the table: "accounts"
  """
  insert_accounts(
    """the rows to be inserted"""
    objects: [accounts_insert_input!]!

    """on conflict condition"""
    on_conflict: accounts_on_conflict
  ): accounts_mutation_response

  """
  insert a single row into the table: "accounts"
  """
  insert_accounts_one(
    """the row to be inserted"""
    object: accounts_insert_input!

    """on conflict condition"""
    on_conflict: accounts_on_conflict
  ): accounts

  """
  insert data into the table: "projects"
  """
  insert_projects(
    """the rows to be inserted"""
    objects: [projects_insert_input!]!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects_mutation_response

  """
  insert a single row into the table: "projects"
  """
  insert_projects_one(
    """the row to be inserted"""
    object: projects_insert_input!

    """on conflict condition"""
    on_conflict: projects_on_conflict
  ): projects

  """
  insert data into the table: "tasks"
  """
  insert_tasks(
    """the rows to be inserted"""
    objects: [tasks_insert_input!]!

    """on conflict condition"""
    on_conflict: tasks_on_conflict
  ): tasks_mutation_response

  """
  insert a single row into the table: "tasks"
  """
  insert_tasks_one(
    """the row to be inserted"""
    object: tasks_insert_input!

    """on conflict condition"""
    on_conflict: tasks_on_conflict
  ): tasks

  """
  insert data into the table: "user_credentials"
  """
  insert_user_credentials(
    """the rows to be inserted"""
    objects: [user_credentials_insert_input!]!

    """on conflict condition"""
    on_conflict: user_credentials_on_conflict
  ): user_credentials_mutation_response

  """
  insert a single row into the table: "user_credentials"
  """
  insert_user_credentials_one(
    """the row to be inserted"""
    object: user_credentials_insert_input!

    """on conflict condition"""
    on_conflict: user_credentials_on_conflict
  ): user_credentials

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "accounts"
  """
  update_accounts(
    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input

    """filter the rows which have to be updated"""
    where: accounts_bool_exp!
  ): accounts_mutation_response

  """
  update single row of the table: "accounts"
  """
  update_accounts_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: accounts_set_input
    pk_columns: accounts_pk_columns_input!
  ): accounts

  """
  update data of the table: "projects"
  """
  update_projects(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input

    """filter the rows which have to be updated"""
    where: projects_bool_exp!
  ): projects_mutation_response

  """
  update single row of the table: "projects"
  """
  update_projects_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: projects_set_input
    pk_columns: projects_pk_columns_input!
  ): projects

  """
  update data of the table: "tasks"
  """
  update_tasks(
    """sets the columns of the filtered rows to the given values"""
    _set: tasks_set_input

    """filter the rows which have to be updated"""
    where: tasks_bool_exp!
  ): tasks_mutation_response

  """
  update single row of the table: "tasks"
  """
  update_tasks_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: tasks_set_input
    pk_columns: tasks_pk_columns_input!
  ): tasks

  """
  update data of the table: "user_credentials"
  """
  update_user_credentials(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_credentials_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_credentials_set_input

    """filter the rows which have to be updated"""
    where: user_credentials_bool_exp!
  ): user_credentials_mutation_response

  """
  update single row of the table: "user_credentials"
  """
  update_user_credentials_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_credentials_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_credentials_set_input
    pk_columns: user_credentials_pk_columns_input!
  ): user_credentials

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "projects"
"""
type projects {
  img: String!
  name: String!
  project_id: String!

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): tasks_aggregate!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!
}

"""
aggregated selection of "projects"
"""
type projects_aggregate {
  aggregate: projects_aggregate_fields
  nodes: [projects!]!
}

"""
aggregate fields of "projects"
"""
type projects_aggregate_fields {
  count(columns: [projects_select_column!], distinct: Boolean): Int!
  max: projects_max_fields
  min: projects_min_fields
}

"""
Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
"""
input projects_bool_exp {
  _and: [projects_bool_exp!]
  _not: projects_bool_exp
  _or: [projects_bool_exp!]
  img: String_comparison_exp
  name: String_comparison_exp
  project_id: String_comparison_exp
  tasks: tasks_bool_exp
  users: users_bool_exp
}

"""
unique or primary key constraints on table "projects"
"""
enum projects_constraint {
  """unique or primary key constraint"""
  projects_pkey
}

"""
input type for inserting data into table "projects"
"""
input projects_insert_input {
  img: String
  name: String
  project_id: String
  tasks: tasks_arr_rel_insert_input
  users: users_arr_rel_insert_input
}

"""aggregate max on columns"""
type projects_max_fields {
  img: String
  name: String
  project_id: String
}

"""aggregate min on columns"""
type projects_min_fields {
  img: String
  name: String
  project_id: String
}

"""
response of any mutation on the table "projects"
"""
type projects_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [projects!]!
}

"""
input type for inserting object relation for remote table "projects"
"""
input projects_obj_rel_insert_input {
  data: projects_insert_input!

  """on conflict condition"""
  on_conflict: projects_on_conflict
}

"""
on conflict condition type for table "projects"
"""
input projects_on_conflict {
  constraint: projects_constraint!
  update_columns: [projects_update_column!]! = []
  where: projects_bool_exp
}

"""Ordering options when selecting data from "projects"."""
input projects_order_by {
  img: order_by
  name: order_by
  project_id: order_by
  tasks_aggregate: tasks_aggregate_order_by
  users_aggregate: users_aggregate_order_by
}

"""primary key columns input for table: projects"""
input projects_pk_columns_input {
  project_id: String!
}

"""
select columns of table "projects"
"""
enum projects_select_column {
  """column name"""
  img

  """column name"""
  name

  """column name"""
  project_id
}

"""
input type for updating data in table "projects"
"""
input projects_set_input {
  img: String
  name: String
  project_id: String
}

"""
update columns of table "projects"
"""
enum projects_update_column {
  """column name"""
  img

  """column name"""
  name

  """column name"""
  project_id
}

type query_root {
  """
  fetch data from the table: "accounts"
  """
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch aggregated fields from the table: "accounts"
  """
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(account_id: String!): accounts

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(project_id: String!): projects

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): tasks_aggregate!

  """fetch data from the table: "tasks" using primary key columns"""
  tasks_by_pk(task_id: String!): tasks

  """An array relationship"""
  user_credentials(
    """distinct select on columns"""
    distinct_on: [user_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_credentials_order_by!]

    """filter the rows returned"""
    where: user_credentials_bool_exp
  ): [user_credentials!]!

  """An aggregate relationship"""
  user_credentials_aggregate(
    """distinct select on columns"""
    distinct_on: [user_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_credentials_order_by!]

    """filter the rows returned"""
    where: user_credentials_bool_exp
  ): user_credentials_aggregate!

  """
  fetch data from the table: "user_credentials" using primary key columns
  """
  user_credentials_by_pk(credential_id: String!): user_credentials

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(user_id: String!): users
}

type subscription_root {
  """
  fetch data from the table: "accounts"
  """
  accounts(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): [accounts!]!

  """
  fetch aggregated fields from the table: "accounts"
  """
  accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [accounts_order_by!]

    """filter the rows returned"""
    where: accounts_bool_exp
  ): accounts_aggregate!

  """fetch data from the table: "accounts" using primary key columns"""
  accounts_by_pk(account_id: String!): accounts

  """
  fetch data from the table: "projects"
  """
  projects(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): [projects!]!

  """
  fetch aggregated fields from the table: "projects"
  """
  projects_aggregate(
    """distinct select on columns"""
    distinct_on: [projects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [projects_order_by!]

    """filter the rows returned"""
    where: projects_bool_exp
  ): projects_aggregate!

  """fetch data from the table: "projects" using primary key columns"""
  projects_by_pk(project_id: String!): projects

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): tasks_aggregate!

  """fetch data from the table: "tasks" using primary key columns"""
  tasks_by_pk(task_id: String!): tasks

  """An array relationship"""
  user_credentials(
    """distinct select on columns"""
    distinct_on: [user_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_credentials_order_by!]

    """filter the rows returned"""
    where: user_credentials_bool_exp
  ): [user_credentials!]!

  """An aggregate relationship"""
  user_credentials_aggregate(
    """distinct select on columns"""
    distinct_on: [user_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_credentials_order_by!]

    """filter the rows returned"""
    where: user_credentials_bool_exp
  ): user_credentials_aggregate!

  """
  fetch data from the table: "user_credentials" using primary key columns
  """
  user_credentials_by_pk(credential_id: String!): user_credentials

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """An aggregate relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(user_id: String!): users
}

"""
columns and relationships of "tasks"
"""
type tasks {
  comment: String
  description: String

  """An object relationship"""
  project: projects!
  project_id: String!
  status: String!
  task_id: String!
  title: String!

  """An object relationship"""
  user: users
  user_id: String
}

"""
aggregated selection of "tasks"
"""
type tasks_aggregate {
  aggregate: tasks_aggregate_fields
  nodes: [tasks!]!
}

"""
aggregate fields of "tasks"
"""
type tasks_aggregate_fields {
  count(columns: [tasks_select_column!], distinct: Boolean): Int!
  max: tasks_max_fields
  min: tasks_min_fields
}

"""
order by aggregate values of table "tasks"
"""
input tasks_aggregate_order_by {
  count: order_by
  max: tasks_max_order_by
  min: tasks_min_order_by
}

"""
input type for inserting array relation for remote table "tasks"
"""
input tasks_arr_rel_insert_input {
  data: [tasks_insert_input!]!

  """on conflict condition"""
  on_conflict: tasks_on_conflict
}

"""
Boolean expression to filter rows from the table "tasks". All fields are combined with a logical 'AND'.
"""
input tasks_bool_exp {
  _and: [tasks_bool_exp!]
  _not: tasks_bool_exp
  _or: [tasks_bool_exp!]
  comment: String_comparison_exp
  description: String_comparison_exp
  project: projects_bool_exp
  project_id: String_comparison_exp
  status: String_comparison_exp
  task_id: String_comparison_exp
  title: String_comparison_exp
  user: users_bool_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "tasks"
"""
enum tasks_constraint {
  """unique or primary key constraint"""
  tasks_pkey

  """unique or primary key constraint"""
  tasks_task_id_key
}

"""
input type for inserting data into table "tasks"
"""
input tasks_insert_input {
  comment: String
  description: String
  project: projects_obj_rel_insert_input
  project_id: String
  status: String
  task_id: String
  title: String
  user: users_obj_rel_insert_input
  user_id: String
}

"""aggregate max on columns"""
type tasks_max_fields {
  comment: String
  description: String
  project_id: String
  status: String
  task_id: String
  title: String
  user_id: String
}

"""
order by max() on columns of table "tasks"
"""
input tasks_max_order_by {
  comment: order_by
  description: order_by
  project_id: order_by
  status: order_by
  task_id: order_by
  title: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type tasks_min_fields {
  comment: String
  description: String
  project_id: String
  status: String
  task_id: String
  title: String
  user_id: String
}

"""
order by min() on columns of table "tasks"
"""
input tasks_min_order_by {
  comment: order_by
  description: order_by
  project_id: order_by
  status: order_by
  task_id: order_by
  title: order_by
  user_id: order_by
}

"""
response of any mutation on the table "tasks"
"""
type tasks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tasks!]!
}

"""
on conflict condition type for table "tasks"
"""
input tasks_on_conflict {
  constraint: tasks_constraint!
  update_columns: [tasks_update_column!]! = []
  where: tasks_bool_exp
}

"""Ordering options when selecting data from "tasks"."""
input tasks_order_by {
  comment: order_by
  description: order_by
  project: projects_order_by
  project_id: order_by
  status: order_by
  task_id: order_by
  title: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: tasks"""
input tasks_pk_columns_input {
  task_id: String!
}

"""
select columns of table "tasks"
"""
enum tasks_select_column {
  """column name"""
  comment

  """column name"""
  description

  """column name"""
  project_id

  """column name"""
  status

  """column name"""
  task_id

  """column name"""
  title

  """column name"""
  user_id
}

"""
input type for updating data in table "tasks"
"""
input tasks_set_input {
  comment: String
  description: String
  project_id: String
  status: String
  task_id: String
  title: String
  user_id: String
}

"""
update columns of table "tasks"
"""
enum tasks_update_column {
  """column name"""
  comment

  """column name"""
  description

  """column name"""
  project_id

  """column name"""
  status

  """column name"""
  task_id

  """column name"""
  title

  """column name"""
  user_id
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user_credentials"
"""
type user_credentials {
  counter: bigint!
  created_at: timestamptz
  credential_id: String!
  public_key: bytea!

  """An object relationship"""
  user: users!
  user_id: String!
}

"""
aggregated selection of "user_credentials"
"""
type user_credentials_aggregate {
  aggregate: user_credentials_aggregate_fields
  nodes: [user_credentials!]!
}

"""
aggregate fields of "user_credentials"
"""
type user_credentials_aggregate_fields {
  avg: user_credentials_avg_fields
  count(columns: [user_credentials_select_column!], distinct: Boolean): Int!
  max: user_credentials_max_fields
  min: user_credentials_min_fields
  stddev: user_credentials_stddev_fields
  stddev_pop: user_credentials_stddev_pop_fields
  stddev_samp: user_credentials_stddev_samp_fields
  sum: user_credentials_sum_fields
  var_pop: user_credentials_var_pop_fields
  var_samp: user_credentials_var_samp_fields
  variance: user_credentials_variance_fields
}

"""
order by aggregate values of table "user_credentials"
"""
input user_credentials_aggregate_order_by {
  avg: user_credentials_avg_order_by
  count: order_by
  max: user_credentials_max_order_by
  min: user_credentials_min_order_by
  stddev: user_credentials_stddev_order_by
  stddev_pop: user_credentials_stddev_pop_order_by
  stddev_samp: user_credentials_stddev_samp_order_by
  sum: user_credentials_sum_order_by
  var_pop: user_credentials_var_pop_order_by
  var_samp: user_credentials_var_samp_order_by
  variance: user_credentials_variance_order_by
}

"""
input type for inserting array relation for remote table "user_credentials"
"""
input user_credentials_arr_rel_insert_input {
  data: [user_credentials_insert_input!]!

  """on conflict condition"""
  on_conflict: user_credentials_on_conflict
}

"""aggregate avg on columns"""
type user_credentials_avg_fields {
  counter: Float
}

"""
order by avg() on columns of table "user_credentials"
"""
input user_credentials_avg_order_by {
  counter: order_by
}

"""
Boolean expression to filter rows from the table "user_credentials". All fields are combined with a logical 'AND'.
"""
input user_credentials_bool_exp {
  _and: [user_credentials_bool_exp!]
  _not: user_credentials_bool_exp
  _or: [user_credentials_bool_exp!]
  counter: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  credential_id: String_comparison_exp
  public_key: bytea_comparison_exp
  user: users_bool_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "user_credentials"
"""
enum user_credentials_constraint {
  """unique or primary key constraint"""
  user_credentials_pkey
}

"""
input type for incrementing numeric columns in table "user_credentials"
"""
input user_credentials_inc_input {
  counter: bigint
}

"""
input type for inserting data into table "user_credentials"
"""
input user_credentials_insert_input {
  counter: bigint
  created_at: timestamptz
  credential_id: String
  public_key: bytea
  user: users_obj_rel_insert_input
  user_id: String
}

"""aggregate max on columns"""
type user_credentials_max_fields {
  counter: bigint
  created_at: timestamptz
  credential_id: String
  user_id: String
}

"""
order by max() on columns of table "user_credentials"
"""
input user_credentials_max_order_by {
  counter: order_by
  created_at: order_by
  credential_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type user_credentials_min_fields {
  counter: bigint
  created_at: timestamptz
  credential_id: String
  user_id: String
}

"""
order by min() on columns of table "user_credentials"
"""
input user_credentials_min_order_by {
  counter: order_by
  created_at: order_by
  credential_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "user_credentials"
"""
type user_credentials_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_credentials!]!
}

"""
on conflict condition type for table "user_credentials"
"""
input user_credentials_on_conflict {
  constraint: user_credentials_constraint!
  update_columns: [user_credentials_update_column!]! = []
  where: user_credentials_bool_exp
}

"""Ordering options when selecting data from "user_credentials"."""
input user_credentials_order_by {
  counter: order_by
  created_at: order_by
  credential_id: order_by
  public_key: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: user_credentials"""
input user_credentials_pk_columns_input {
  credential_id: String!
}

"""
select columns of table "user_credentials"
"""
enum user_credentials_select_column {
  """column name"""
  counter

  """column name"""
  created_at

  """column name"""
  credential_id

  """column name"""
  public_key

  """column name"""
  user_id
}

"""
input type for updating data in table "user_credentials"
"""
input user_credentials_set_input {
  counter: bigint
  created_at: timestamptz
  credential_id: String
  public_key: bytea
  user_id: String
}

"""aggregate stddev on columns"""
type user_credentials_stddev_fields {
  counter: Float
}

"""
order by stddev() on columns of table "user_credentials"
"""
input user_credentials_stddev_order_by {
  counter: order_by
}

"""aggregate stddev_pop on columns"""
type user_credentials_stddev_pop_fields {
  counter: Float
}

"""
order by stddev_pop() on columns of table "user_credentials"
"""
input user_credentials_stddev_pop_order_by {
  counter: order_by
}

"""aggregate stddev_samp on columns"""
type user_credentials_stddev_samp_fields {
  counter: Float
}

"""
order by stddev_samp() on columns of table "user_credentials"
"""
input user_credentials_stddev_samp_order_by {
  counter: order_by
}

"""aggregate sum on columns"""
type user_credentials_sum_fields {
  counter: bigint
}

"""
order by sum() on columns of table "user_credentials"
"""
input user_credentials_sum_order_by {
  counter: order_by
}

"""
update columns of table "user_credentials"
"""
enum user_credentials_update_column {
  """column name"""
  counter

  """column name"""
  created_at

  """column name"""
  credential_id

  """column name"""
  public_key

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type user_credentials_var_pop_fields {
  counter: Float
}

"""
order by var_pop() on columns of table "user_credentials"
"""
input user_credentials_var_pop_order_by {
  counter: order_by
}

"""aggregate var_samp on columns"""
type user_credentials_var_samp_fields {
  counter: Float
}

"""
order by var_samp() on columns of table "user_credentials"
"""
input user_credentials_var_samp_order_by {
  counter: order_by
}

"""aggregate variance on columns"""
type user_credentials_variance_fields {
  counter: Float
}

"""
order by variance() on columns of table "user_credentials"
"""
input user_credentials_variance_order_by {
  counter: order_by
}

"""
columns and relationships of "users"
"""
type users {
  current_challenge: String
  password_hash: String

  """An object relationship"""
  project: projects!
  project_id: String!
  role: String!

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): tasks_aggregate!

  """An array relationship"""
  user_credentials(
    """distinct select on columns"""
    distinct_on: [user_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_credentials_order_by!]

    """filter the rows returned"""
    where: user_credentials_bool_exp
  ): [user_credentials!]!

  """An aggregate relationship"""
  user_credentials_aggregate(
    """distinct select on columns"""
    distinct_on: [user_credentials_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_credentials_order_by!]

    """filter the rows returned"""
    where: user_credentials_bool_exp
  ): user_credentials_aggregate!
  user_id: String!
  username: String!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  current_challenge: String_comparison_exp
  password_hash: String_comparison_exp
  project: projects_bool_exp
  project_id: String_comparison_exp
  role: String_comparison_exp
  tasks: tasks_bool_exp
  user_credentials: user_credentials_bool_exp
  user_id: String_comparison_exp
  username: String_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  current_challenge: String
  password_hash: String
  project: projects_obj_rel_insert_input
  project_id: String
  role: String
  tasks: tasks_arr_rel_insert_input
  user_credentials: user_credentials_arr_rel_insert_input
  user_id: String
  username: String
}

"""aggregate max on columns"""
type users_max_fields {
  current_challenge: String
  password_hash: String
  project_id: String
  role: String
  user_id: String
  username: String
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  current_challenge: order_by
  password_hash: order_by
  project_id: order_by
  role: order_by
  user_id: order_by
  username: order_by
}

"""aggregate min on columns"""
type users_min_fields {
  current_challenge: String
  password_hash: String
  project_id: String
  role: String
  user_id: String
  username: String
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  current_challenge: order_by
  password_hash: order_by
  project_id: order_by
  role: order_by
  user_id: order_by
  username: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """on conflict condition"""
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  current_challenge: order_by
  password_hash: order_by
  project: projects_order_by
  project_id: order_by
  role: order_by
  tasks_aggregate: tasks_aggregate_order_by
  user_credentials_aggregate: user_credentials_aggregate_order_by
  user_id: order_by
  username: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  user_id: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  current_challenge

  """column name"""
  password_hash

  """column name"""
  project_id

  """column name"""
  role

  """column name"""
  user_id

  """column name"""
  username
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  current_challenge: String
  password_hash: String
  project_id: String
  role: String
  user_id: String
  username: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  current_challenge

  """column name"""
  password_hash

  """column name"""
  project_id

  """column name"""
  role

  """column name"""
  user_id

  """column name"""
  username
}